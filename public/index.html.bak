<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>עוזר AI של Atlassian</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><rect width='32' height='32' rx='6' fill='%23667eea'/><text x='50%25' y='50%25' font-size='14' font-weight='bold' fill='white' text-anchor='middle' dy='.35em'>AA</text></svg>">
    <style>
        /* Report table styles */
        .assistant-bubble table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        .assistant-bubble table th { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px; text-align: left; font-weight: 600; }
        .assistant-bubble table td { padding: 10px 12px; border-bottom: 1px solid #e1e4e8; }
        .assistant-bubble table tr:hover { background-color: #f6f8fa; }
        .assistant-bubble h1 { color: #1a202c; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
        .assistant-bubble h2 { color: #2d3748; margin-top: 20px; }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #f5f5f5;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07), 0 1px 3px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 1200px;
            height: 90vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid #e0e0e0;
        }
        
        .header {
            background: white;
            color: #1a1a1a;
            padding: 30px;
            text-align: center;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .header h1 {
            font-size: 1.8em;
            margin-bottom: 8px;
            font-weight: 600;
            color: #0052cc; /* Atlassian blue */
        }
        
        .header p {
            color: #5e6c84;
            font-size: 1em;
        }
        
        .suggestions {
            padding: 20px;
            background: #fafbfc;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .suggestions-title {
            font-size: 0.85em;
            color: #5e6c84;
            margin-bottom: 10px;
            font-weight: 500;
        }
        
        .suggestion-chips {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .chip {
            background: white;
            border: 1px solid #dfe1e6;
            color: #172b4d;
            padding: 8px 16px;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9em;
        }
        
        .chip:hover {
            background: #0052cc;
            color: white;
            border-color: #0052cc;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 82, 204, 0.2);
        }
        
        .chat-area {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
            background: #d6d6d6;
        }
        
        .message {
            margin-bottom: 20px;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .user-message {
            text-align: right;
        }
        
        .user-bubble {
            display: inline-block;
            background: #0052cc;
            color: white;
            padding: 12px 18px;
            border-radius: 18px 18px 4px 18px;
            max-width: 70%;
            text-align: left;
            font-size: 0.95em;
        }
        
        .assistant-message {
            text-align: left;
        }
        
        .assistant-bubble {
            display: inline-block;
            background:white;
            color: #172b4d;
            padding: 12px 18px;
            border-radius: 18px 18px 18px 4px;
            max-width: 80%;
            font-size: 0.95em;
            border: 1px solid #e0e0e0;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 12px;
            margin-top: 15px;
        }
        
        .issue-card {
            background: white;
            border-left: 3px solid #0052cc;
            padding: 12px;
            border-radius: 6px;
            transition: all 0.2s;
            border: 1px solid #dfe1e6;
            border-left: 3px solid #0052cc;
        }
        
        .issue-card:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateX(2px);
        }
        
        .issue-key {
            font-weight: 600;
            color: #0052cc;
            margin-bottom: 4px;
            font-size: 0.85em;
        }
        
        .issue-summary {
            font-weight: 500;
            margin-bottom: 8px;
            color: #172b4d;
            font-size: 0.95em;
        }
        
        .issue-meta {
            font-size: 0.8em;
            color: #5e6c84;
        }
        
        .priority-highest {
            border-left-color: #de350b;
        }
        
        .priority-high {
            border-left-color: #ff8b00;
        }
        
        .priority-medium {
            border-left-color: #0065ff;
        }
        
        .priority-low {
            border-left-color: #5e6c84;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #0052cc 0%, #0747a6 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-top: 15px;
        }
        
        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .stat {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
        }
        
        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
        }
        
        #queryInput {
            flex: 1;
            padding: 12px 18px;
            border: 1px solid #dfe1e6;
            border-radius: 6px;
            font-size: 0.95em;
            outline: none;
            transition: border-color 0.2s;
            background: #fafbfc;
        }
        
        #queryInput:focus {
            border-color: #0052cc;
            background: white;
            box-shadow: 0 0 0 2px rgba(0, 82, 204, 0.1);
        }
        
        #sendBtn {
            background: #0052cc;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.95em;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        #sendBtn:hover {
            background: #0747a6;
            box-shadow: 0 2px 4px rgba(0, 82, 204, 0.3);
        }
        
        #sendBtn:disabled {
            background: #5e6c84;
            cursor: not-allowed;
        }
        
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 0.8s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Mobile styles */
        @media (max-width: 768px) {
            body {
                padding: 0;
            }
            
            .container {
                border-radius: 0;
                height: 100vh;
                border: none;
            }
            
            .header {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 1.3em;
            }
            
            .suggestions {
                padding: 10px;
                max-height: 60px;
                overflow-x: auto;
            }
            
            .suggestion-chips {
                flex-wrap: nowrap;
                overflow-x: auto;
            }
            
            .chip {
                flex-shrink: 0;
            }
            
            .chat-area {
                padding: 15px;
            }
            
            .results-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🤖 עוזר AI של Atlassian</h1>
            <p>שאל אותי כל דבר על Jira או Confluence שלך</p>
        </div>

        <div class="suggestions">
            <div class="suggestions-title">💡 נסה לשאול:</div>
            <div class="suggestion-chips" id="suggestionChips">
                <!-- Dynamic suggestions will be inserted here -->
            </div>
        </div>
        
        <div class="chat-area" id="chatArea">
            <div class="message assistant-message">
                <div class="assistant-bubble">
                    👋 שלום! אני העוזר שלך ל-Atlassian. אני יכול לעזור לך לחפש נושאים ב-Jira, לראות באגים, לבדוק עדיפויות, לעיין בדפי Confluence ולייצר דוחות. במה תרצה שאעזור?
                </div>
            </div>
        </div>

        <div class="input-area">
            <input
                type="text"
                id="queryInput"
                placeholder="שאל אותי כל דבר על Jira או Confluence שלך..."
                onkeypress="if(event.key==='Enter') sendQuery()"
                dir="auto"
            />
            <button id="sendBtn" onclick="sendQuery()">שלח</button>
        </div>
    </div>
    <script src="config.js"></script>
    <script>
        const chatArea = document.getElementById('chatArea');
        const queryInput = document.getElementById('queryInput');
        const sendBtn = document.getElementById('sendBtn');

        // Sophisticated suggestion system with contextual hints
        const suggestionSets = {
            initial: [
                { icon: '❓', text: 'עזרה', query: 'עזרה' },
                { icon: '🐛', text: 'הצג את כל הבאגים', query: 'הצג את כל הבאגים' },
                { icon: '🚨', text: 'נושאים בעדיפות גבוהה', query: 'הצג נושאים בעדיפות גבוהה' },
                { icon: '📊', text: 'סיכום פרויקט', query: 'תן לי סיכום פרויקט' },
                { icon: '📋', text: 'דוח ספרינט', query: 'צור דוח ספרינט' },
                { icon: '👤', text: 'משימות שלי', query: 'הצג משימות משויכות לי' },
                { icon: '🔮', text: 'ספרינטים עתידיים', query: 'הצג משימות בספרינטים עתידיים' }
            ],
            help: [
                { icon: '🔍', text: 'חיפוש נושאים', query: 'חפש נושאים בסטטוס In Progress' },
                { icon: '📅', text: 'שאילתות ספרינט', query: 'הצג נושאים בספרינט 2' },
                { icon: '👥', text: 'משימות לפי משתמש', query: 'הצג משימות משויכות ל-Kof Adam' },
                { icon: '📊', text: 'דוחות', query: 'צור דוח באגים' },
                { icon: '🔮', text: 'ספרינטים עתידיים', query: 'הצג משימות בביצוע בספרינטים עתידיים' },
                { icon: '📚', text: 'Confluence', query: 'הצג דפי Confluence' },
                { icon: '🎯', text: 'עוד דוגמאות', query: 'הצג דוגמאות נוספות' }
            ],
            afterBugs: [
                { icon: '🔥', text: 'רק קריטיים', query: 'רק קריטיים' },
                { icon: '📅', text: 'באגים מהשבוע', query: 'הצג באגים מהשבוע האחרון' },
                { icon: '📝', text: 'צור דוח באגים', query: 'צור דוח באגים' },
                { icon: '✅', text: 'באגים שתוקנו', query: 'הצג באגים שתוקנו' }
            ],
            afterSprint: [
                { icon: '📊', text: 'דוח סטטוס', query: 'צור דוח סטטוס' },
                { icon: '🎯', text: 'ספרינט הבא', query: 'הצג ספרינט הבא' },
                { icon: '📈', text: 'ניתוח התקדמות', query: 'תן לי ניתוח התקדמות' }
            ],
            afterSummary: [
                { icon: '🐛', text: 'הצג באגים', query: 'הצג את כל הבאגים' },
                { icon: '📋', text: 'דוח ספרינט', query: 'צור דוח ספרינט' },
                { icon: '🔍', text: 'חפש נושאים', query: 'חפש נושאים' }
            ]
        };

        let currentContext = 'initial';
        let lastQuery = null;

        function updateSuggestions(context = 'initial') {
            currentContext = context;
            let suggestions = suggestionSets[context] || suggestionSets.initial;
            const container = document.getElementById('suggestionChips');
            container.innerHTML = '';

            // Always add help button first (unless we're already in help context)
            if (context !== 'help' && context !== 'initial') {
                const helpChip = document.createElement('div');
                helpChip.className = 'chip';
                helpChip.innerHTML = '❓ עזרה';
                helpChip.onclick = () => askQuestion('עזרה');
                container.appendChild(helpChip);
            }

            suggestions.forEach(sugg => {
                const chip = document.createElement('div');
                chip.className = 'chip';
                chip.innerHTML = `${sugg.icon} ${sugg.text}`;
                chip.onclick = () => askQuestion(sugg.query);
                container.appendChild(chip);
            });
        }

        // Initialize with default suggestions
        updateSuggestions('initial');
        
        // Global addMessage function - moved to global scope to fix TypeError
        function addMessage(sender, text, data = null) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            const bubble = document.createElement('div');
            bubble.className = `${sender}-bubble`;
            bubble.innerHTML = text;
            
            // Handle report type data
            if (data && data.type === 'report') {
                // Add export options with buttons
                if (data.exportOptions) {
                    const exportDiv = document.createElement('div');
                    exportDiv.style.cssText = 'background: #f0f7ff; padding: 15px; margin-top: 10px; border-radius: 8px; border-right: 4px solid #0052cc; direction: rtl; text-align: right;';

                    const title = document.createElement('div');
                    title.style.cssText = 'font-weight: 600; margin-bottom: 10px; color: #0052cc;';
                    title.textContent = '📋 אפשרויות ייצוא:';
                    exportDiv.appendChild(title);

                    const buttonsDiv = document.createElement('div');
                    buttonsDiv.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';

                    // Copy HTML button
                    const copyBtn = document.createElement('button');
                    copyBtn.textContent = '📋 העתק HTML';
                    copyBtn.style.cssText = 'background: #0052cc; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 0.9em;';
                    copyBtn.onclick = () => {
                        navigator.clipboard.writeText(data.exportOptions.html).then(() => {
                            copyBtn.textContent = '✅ הועתק!';
                            setTimeout(() => copyBtn.textContent = '📋 העתק HTML', 2000);
                        });
                    };
                    buttonsDiv.appendChild(copyBtn);

                    // Download HTML button
                    const downloadBtn = document.createElement('button');
                    downloadBtn.textContent = '💾 הורד HTML';
                    downloadBtn.style.cssText = 'background: #00875a; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 0.9em;';
                    downloadBtn.onclick = () => {
                        const blob = new Blob([data.exportOptions.html], { type: 'text/html' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `report-${new Date().toISOString().split('T')[0]}.html`;
                        a.click();
                        URL.revokeObjectURL(url);
                    };
                    buttonsDiv.appendChild(downloadBtn);

                    exportDiv.appendChild(buttonsDiv);

                    const hint = document.createElement('div');
                    hint.style.cssText = 'margin-top: 10px; font-size: 0.85em; color: #5e6c84;';
                    hint.textContent = 'לפרסום ב-Confluence: העתק את ה-HTML והדבק בעורך Confluence במצב HTML';
                    exportDiv.appendChild(hint);

                    bubble.appendChild(exportDiv);
                }

                const reportDiv = document.createElement('div');
                reportDiv.style.cssText = 'background: white; padding: 25px; margin-top: 15px; border-radius: 12px; border: 1px solid #dfe1e6; overflow-x: auto; box-shadow: 0 2px 4px rgba(0,0,0,0.05);';
                reportDiv.innerHTML = data.report.content;
                bubble.appendChild(reportDiv);
            }   
                     
            if (data) {
                // Handle issue lists
                if (data.type === 'issues' || data.type === 'bugs' || data.type === 'stories' || data.type === 'tasks') {
                    const grid = document.createElement('div');
                    grid.className = 'results-grid';
                    
                    data.data.forEach(issue => {
                        const card = document.createElement('div');
                        const priority = issue.fields.priority?.name || 'Medium';
                        card.className = `issue-card priority-${priority.toLowerCase()}`;

                        // Build assignee display with proper RTL handling
                        const assignee = issue.fields.assignee?.displayName || 'לא משויך';
                        const reporter = issue.fields.reporter?.displayName || 'Unknown';
                        const assigneeInfo = issue.fields.assignee
                            ? `<span style="direction: ltr; display: inline-block;">👤 ${assignee}</span>`
                            : '<span style="color: #6b778c; direction: ltr; display: inline-block;">👤 לא משויך</span>';

                        card.innerHTML = `
                            <div class="issue-key">${issue.key}</div>
                            <div class="issue-summary">${issue.fields.summary}</div>
                            <div class="issue-meta">
                                ${assigneeInfo} |
                                Priority: ${priority} |
                                Type: ${issue.fields.issuetype.name} |
                                Status: ${issue.fields.status.name}
                            </div>
                        `;
                        grid.appendChild(card);
                    });
                    
                    bubble.appendChild(grid);
                }
                
                // Handle project summary
                if (data.type === 'summary') {
                    const summaryCard = document.createElement('div');
                    summaryCard.className = 'summary-card';
                    summaryCard.innerHTML = `
                        <h3>Project Statistics</h3>
                        <div class="summary-stats">
                            <div class="stat">
                                <div class="stat-number">${data.data.total}</div>
                                <div class="stat-label">Total Issues</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${data.data.open}</div>
                                <div class="stat-label">Open</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${data.data.done}</div>
                                <div class="stat-label">Completed</div>
                            </div>
                        </div>
                    `;
                    bubble.appendChild(summaryCard);
                    
                    if (data.issues && data.issues.length > 0) {
                        const grid = document.createElement('div');
                        grid.className = 'results-grid';
                        grid.style.marginTop = '20px';
                        
                        data.issues.slice(0, 6).forEach(issue => {
                            const card = document.createElement('div');
                            const priority = issue.fields.priority?.name || 'Medium';
                            card.className = `issue-card priority-${priority.toLowerCase()}`;
                            card.innerHTML = `
                                <div class="issue-key">${issue.key}</div>
                                <div class="issue-summary">${issue.fields.summary}</div>
                                <div class="issue-meta">
                                    ${priority} | ${issue.fields.issuetype.name}
                                </div>
                            `;
                            grid.appendChild(card);
                        });
                        
                        bubble.appendChild(grid);
                    }
                }
                
                // Handle Confluence pages
                if (data.type === 'confluence') {
                    const grid = document.createElement('div');
                    grid.className = 'results-grid';

                    data.data.forEach(page => {
                        const card = document.createElement('div');
                        card.className = 'issue-card';
                        card.style.borderLeftColor = '#2684ff';

                        // Strip HTML tags from excerpt
                        let cleanExcerpt = '';
                        if (page.excerpt) {
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = page.excerpt;
                            cleanExcerpt = tempDiv.textContent || tempDiv.innerText || '';
                        }

                        // Get Confluence URL - try multiple possible locations
                        let baseUrl = null;
                        if (page.url) {
                            baseUrl = `https://kofadam.atlassian.net/wiki${page.url}`;
                        } else if (page._links?.webui) {
                            baseUrl = `https://kofadam.atlassian.net/wiki${page._links.webui}`;
                        } else if (page.resultGlobalContainer?.displayUrl) {
                            baseUrl = page.resultGlobalContainer.displayUrl;
                        }

                        card.innerHTML = `
                            <div class="issue-key">📄 ${page.resultGlobalContainer?.title || page.space?.name || 'Confluence'}</div>
                            <div class="issue-summary">${page.title}</div>
                            ${cleanExcerpt ? `<div class="issue-meta">${cleanExcerpt.substring(0, 150)}...</div>` : ''}
                        `;

                        // Make card clickable
                        if (baseUrl) {
                            card.onclick = () => window.open(baseUrl, '_blank');
                            card.style.cursor = 'pointer';
                            card.title = 'לחץ כדי לפתוח ב-Confluence';
                        }

                        grid.appendChild(card);
                    });

                    bubble.appendChild(grid);
                }
            }
            
            messageDiv.appendChild(bubble);
            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }
        
        function askQuestion(question) {
            queryInput.value = question;
            sendQuery();
        }
        
        async function sendQuery() {
            const query = queryInput.value.trim();
            if (!query) return;

            // Store last query for context
            lastQuery = query;

            // Check for help command
            const lowerQuery = query.toLowerCase();
            if (lowerQuery === 'עזרה' || lowerQuery === 'help' || lowerQuery === '?' ||
                lowerQuery === 'הצג דוגמאות נוספות') {
                // Add user message
                addMessage('user', query);
                queryInput.value = '';

                // Show help message
                const helpMessage = `
<h3>📚 מדריך שימוש</h3>

<h4>🔍 חיפוש נושאים:</h4>
<ul>
  <li>הצג את כל הבאגים</li>
  <li>הצג נושאים בעדיפות גבוהה</li>
  <li>חפש נושאים בסטטוס In Progress</li>
  <li>הצג נושאים פעילים</li>
</ul>

<h4>📅 שאילתות ספרינט:</h4>
<ul>
  <li>הצג נושאים בספרינט 1</li>
  <li>הצג משימות בספרינטים עתידיים</li>
  <li>הצג משימות בביצוע בספרינטים עתידיים</li>
</ul>

<h4>👥 משימות לפי משתמש:</h4>
<ul>
  <li>הצג משימות משויכות לי</li>
  <li>הצג משימות משויכות ל-Kof Adam</li>
  <li>הצג משימות משויכות ל-Kof Adam בספרינט 2</li>
</ul>

<h4>📊 יצירת דוחות:</h4>
<ul>
  <li>צור דוח ספרינט 1</li>
  <li>צור דוח באגים</li>
  <li>צור דוח סטטוס</li>
  <li>צור דוח של משימות בספרינטים עתידיים</li>
  <li>צור דוח באגים ופרסם ל-Confluence</li>
</ul>

<h4>📚 Confluence:</h4>
<ul>
  <li>הצג דפי Confluence</li>
  <li>חפש ב-Confluence נושאים על OAuth</li>
</ul>

<p style="margin-top: 20px; color: #5e6c84;">💡 טיפ: לחץ על אחד הכפתורים למעלה כדי לנסות שאילתא לדוגמה!</p>
                `;

                addMessage('assistant', helpMessage);
                updateSuggestions('help');
                return;
            }

            // Add user message
            addMessage('user', query);
            queryInput.value = '';

            // Disable input
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<div class="loading"></div>';

            try {
                const response = await fetch(`${window.API_URL}/api/query`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ query })
                });

                const result = await response.json();

                // Add assistant response
                addMessage('assistant', result.message, result);

                // Update suggestions based on query context
                if (lowerQuery.includes('באג') || lowerQuery.includes('bug')) {
                    updateSuggestions('afterBugs');
                } else if (lowerQuery.includes('ספרינט') || lowerQuery.includes('sprint')) {
                    updateSuggestions('afterSprint');
                } else if (lowerQuery.includes('סיכום') || lowerQuery.includes('summary')) {
                    updateSuggestions('afterSummary');
                } else {
                    updateSuggestions('initial');
                }

            } catch (error) {
                addMessage('assistant', '❌ שגיאה: ' + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.textContent = 'שלח';
            }
        }
    </script>
</body>
</html>