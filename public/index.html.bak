<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Atlassian AI Assistant</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><rect width='32' height='32' rx='6' fill='%23667eea'/><text x='50%25' y='50%25' font-size='14' font-weight='bold' fill='white' text-anchor='middle' dy='.35em'>AA</text></svg>">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #f5f5f5;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07), 0 1px 3px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 1200px;
            height: 90vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid #e0e0e0;
        }
        
        .header {
            background: white;
            color: #1a1a1a;
            padding: 30px;
            text-align: center;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .header h1 {
            font-size: 1.8em;
            margin-bottom: 8px;
            font-weight: 600;
            color: #0052cc; /* Atlassian blue */
        }
        
        .header p {
            color: #5e6c84;
            font-size: 1em;
        }
        
        .suggestions {
            padding: 20px;
            background: #fafbfc;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .suggestions-title {
            font-size: 0.85em;
            color: #5e6c84;
            margin-bottom: 10px;
            font-weight: 500;
        }
        
        .suggestion-chips {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .chip {
            background: white;
            border: 1px solid #dfe1e6;
            color: #172b4d;
            padding: 8px 16px;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9em;
        }
        
        .chip:hover {
            background: #0052cc;
            color: white;
            border-color: #0052cc;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 82, 204, 0.2);
        }
        
        .chat-area {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
            background: #d6d6d6;
        }
        
        .message {
            margin-bottom: 20px;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .user-message {
            text-align: right;
        }
        
        .user-bubble {
            display: inline-block;
            background: #0052cc;
            color: white;
            padding: 12px 18px;
            border-radius: 18px 18px 4px 18px;
            max-width: 70%;
            text-align: left;
            font-size: 0.95em;
        }
        
        .assistant-message {
            text-align: left;
        }
        
        .assistant-bubble {
            display: inline-block;
            background:white;
            color: #172b4d;
            padding: 12px 18px;
            border-radius: 18px 18px 18px 4px;
            max-width: 80%;
            font-size: 0.95em;
            border: 1px solid #e0e0e0;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 12px;
            margin-top: 15px;
        }
        
        .issue-card {
            background: white;
            border-left: 3px solid #0052cc;
            padding: 12px;
            border-radius: 6px;
            transition: all 0.2s;
            border: 1px solid #dfe1e6;
            border-left: 3px solid #0052cc;
        }
        
        .issue-card:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateX(2px);
        }
        
        .issue-key {
            font-weight: 600;
            color: #0052cc;
            margin-bottom: 4px;
            font-size: 0.85em;
        }
        
        .issue-summary {
            font-weight: 500;
            margin-bottom: 8px;
            color: #172b4d;
            font-size: 0.95em;
        }
        
        .issue-meta {
            font-size: 0.8em;
            color: #5e6c84;
        }
        
        .priority-highest {
            border-left-color: #de350b;
        }
        
        .priority-high {
            border-left-color: #ff8b00;
        }
        
        .priority-medium {
            border-left-color: #0065ff;
        }
        
        .priority-low {
            border-left-color: #5e6c84;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #0052cc 0%, #0747a6 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-top: 15px;
        }
        
        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .stat {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
        }
        
        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
        }
        
        #queryInput {
            flex: 1;
            padding: 12px 18px;
            border: 1px solid #dfe1e6;
            border-radius: 6px;
            font-size: 0.95em;
            outline: none;
            transition: border-color 0.2s;
            background: #fafbfc;
        }
        
        #queryInput:focus {
            border-color: #0052cc;
            background: white;
            box-shadow: 0 0 0 2px rgba(0, 82, 204, 0.1);
        }
        
        #sendBtn {
            background: #0052cc;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.95em;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        #sendBtn:hover {
            background: #0747a6;
            box-shadow: 0 2px 4px rgba(0, 82, 204, 0.3);
        }
        
        #sendBtn:disabled {
            background: #5e6c84;
            cursor: not-allowed;
        }
        
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 0.8s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Mobile styles */
        @media (max-width: 768px) {
            body {
                padding: 0;
            }
            
            .container {
                border-radius: 0;
                height: 100vh;
                border: none;
            }
            
            .header {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 1.3em;
            }
            
            .suggestions {
                padding: 10px;
                max-height: 60px;
                overflow-x: auto;
            }
            
            .suggestion-chips {
                flex-wrap: nowrap;
                overflow-x: auto;
            }
            
            .chip {
                flex-shrink: 0;
            }
            
            .chat-area {
                padding: 15px;
            }
            
            .results-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Atlassian AI Assistant</h1>
            <p>Ask me anything about your Jira or Confluence workspace</p>
        </div>
        
        <div class="suggestions">
            <div class="suggestions-title">üí° Try asking:</div>
            <div class="suggestion-chips">
                <div class="chip" onclick="askQuestion('Show me all bugs')">üêõ Show me all bugs</div>
                <div class="chip" onclick="askQuestion('What are the high priority issues?')">üö® High priority issues</div>
                <div class="chip" onclick="askQuestion('Give me a project summary')">üìä Project summary</div>
                <div class="chip" onclick="askQuestion('Show confluence pages')">üìö Confluence pages</div>
                <div class="chip" onclick="askQuestion('Find issues about API')">üîç Search issues</div>
            </div>
        </div>
        
        <div class="chat-area" id="chatArea">
            <div class="message assistant-message">
                <div class="assistant-bubble">
                    üëã Hello! I'm your AI assistant for Atlassian. I can help you search Jira issues, view bugs, check priorities, browse Confluence pages, and more. What would you like to know?
                </div>
            </div>
        </div>
        
        <div class="input-area">
            <input 
                type="text" 
                id="queryInput" 
                placeholder="Ask me anything about your Jira or Confluence..."
                onkeypress="if(event.key==='Enter') sendQuery()"
            />
            <button id="sendBtn" onclick="sendQuery()">Send</button>
        </div>
    </div>
    <script src="config.js"></script>
    <script>
        const chatArea = document.getElementById('chatArea');
        const queryInput = document.getElementById('queryInput');
        const sendBtn = document.getElementById('sendBtn');
        
        function askQuestion(question) {
            queryInput.value = question;
            sendQuery();
        }
        
        async function sendQuery() {
            const query = queryInput.value.trim();
            if (!query) return;
            
            // Add user message
            addMessage('user', query);
            queryInput.value = '';
            
            // Disable input
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<div class="loading"></div>';
            
            try {
                const response = await fetch(`${window.API_URL}/api/query`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ query })
                });
                
                const result = await response.json();
                
                // Add assistant response
                addMessage('assistant', result.message, result);
                
            } catch (error) {
                addMessage('assistant', '‚ùå Error: ' + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.textContent = 'Send';
            }
        }
        
        function addMessage(sender, text, data = null) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            const bubble = document.createElement('div');
            bubble.className = `${sender}-bubble`;
            bubble.innerHTML = text;
            if (data.type === 'report') {
                const reportDiv = document.createElement('div');
                reportDiv.style.cssText = 'background: white; padding: 20px; margin-top: 15px; border-radius: 8px; border: 1px solid #dfe1e6; overflow-x: auto;';
                reportDiv.innerHTML = data.report.content;
                bubble.appendChild(reportDiv);
            }   
                     
            if (data) {
                if (data.type === 'issues' || data.type === 'bugs' || data.type === 'stories' || data.type === 'tasks') {
                    const grid = document.createElement('div');
                    grid.className = 'results-grid';
                    
                    data.data.forEach(issue => {
                        const card = document.createElement('div');
                        const priority = issue.fields.priority?.name || 'Medium';
                        card.className = `issue-card priority-${priority.toLowerCase()}`;
                        card.innerHTML = `
                            <div class="issue-key">${issue.key}</div>
                            <div class="issue-summary">${issue.fields.summary}</div>
                            <div class="issue-meta">
                                Priority: ${priority} | 
                                Type: ${issue.fields.issuetype.name} |
                                Status: ${issue.fields.status.name}
                            </div>
                        `;
                        grid.appendChild(card);
                    });
                    
                    bubble.appendChild(grid);
                }
                
                if (data.type === 'summary') {
                    const summaryCard = document.createElement('div');
                    summaryCard.className = 'summary-card';
                    summaryCard.innerHTML = `
                        <h3>Project Statistics</h3>
                        <div class="summary-stats">
                            <div class="stat">
                                <div class="stat-number">${data.data.total}</div>
                                <div class="stat-label">Total Issues</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${data.data.open}</div>
                                <div class="stat-label">Open</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${data.data.done}</div>
                                <div class="stat-label">Completed</div>
                            </div>
                        </div>
                    `;
                    bubble.appendChild(summaryCard);
                    
                    if (data.issues && data.issues.length > 0) {
                        const grid = document.createElement('div');
                        grid.className = 'results-grid';
                        grid.style.marginTop = '20px';
                        
                        data.issues.slice(0, 6).forEach(issue => {
                            const card = document.createElement('div');
                            const priority = issue.fields.priority?.name || 'Medium';
                            card.className = `issue-card priority-${priority.toLowerCase()}`;
                            card.innerHTML = `
                                <div class="issue-key">${issue.key}</div>
                                <div class="issue-summary">${issue.fields.summary}</div>
                                <div class="issue-meta">
                                    ${priority} | ${issue.fields.issuetype.name}
                                </div>
                            `;
                            grid.appendChild(card);
                        });
                        
                        bubble.appendChild(grid);
                    }
                }
                
                if (data.type === 'confluence') {
                    const grid = document.createElement('div');
                    grid.className = 'results-grid';
                    
                    data.data.forEach(page => {
                        const card = document.createElement('div');
                        card.className = 'issue-card';
                        card.style.borderLeftColor = '#2684ff';
                        card.innerHTML = `
                            <div class="issue-key">üìÑ ${page.space?.name || 'Confluence'}</div>
                            <div class="issue-summary">${page.title}</div>
                            ${page.excerpt ? `<div class="issue-meta">${page.excerpt.substring(0, 100)}...</div>` : ''}
                        `;
                        grid.appendChild(card);
                    });
                    
                    bubble.appendChild(grid);
                }
            }
            
            messageDiv.appendChild(bubble);
            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }
    </script>
</body>
</html>